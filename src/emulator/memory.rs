use super::Emulator;

const FONT_SET: [[u8; 5]; 16] = 
[[0xF0,0x90,0x90,0x90,0xF0],  // 0
[0x20,0x60,0x20,0x20,0x70,],  // 1
[0xF0,0x10,0xF0,0x80,0xF0],   // 2
[0xF0,0x10,0xF0,0x10,0xF0],   // 3
[0x90,0x90,0xF0,0x10,0x10],   // 4
[0xF0,0x80,0xF0,0x10,0xF0],   // 5
[0xF0,0x80,0xF0,0x90,0xF0],   // 6
[0xF0,0x10,0x20,0x40,0x40],   // 7
[0xF0,0x90,0xF0,0x90,0xF0],   // 8
[0xF0,0x90,0xF0,0x10,0xF0],   // 9
[0xF0,0x90,0xF0,0x90,0x90],   // A
[0xE0,0x90,0xE0,0x90,0xE0],   // B
[0xF0,0x80,0x80,0x80,0xF0],   // C
[0xE0,0x90,0x90,0x90,0xE0],   // D
[0xF0,0x80,0xF0,0x80,0xF0],   // E
[0xF0,0x80,0xF0,0x80,0x80]];  // F

pub const SCRIPT_ADDR: usize = 0x200;

impl Emulator{
    // Loading Fontset into memory
    pub fn load_font(&mut self){
        for (start, bytes) in FONT_SET.iter().enumerate(){
            self.memory[(5 * start)] = bytes[0];
            self.memory[(5 * start) + 1] = bytes[1];
            self.memory[(5 * start) + 2] = bytes[2];
            self.memory[(5 * start) + 3] = bytes[3];
            self.memory[(5 * start) + 4] = bytes[4];
        }
    }

    // Loading Script into memory
    pub fn load_script(&mut self, script: &[u8]){
        for i in 0..script.len(){
            self.memory[SCRIPT_ADDR + i] = script[i];
        }
    }
}